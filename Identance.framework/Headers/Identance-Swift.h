#include <TargetConditionals.h>
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Identance",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif










SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol ZNTokenProvider
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ClosureTokenProvider")
@interface ZNClosureTokenProvider : NSObject <ZNTokenProvider>
- (nonnull instancetype)initWithProvider:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable)))provider OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nonnull provider)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable));
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
enum ZNConfigurationWorkingMode : NSInteger;
@class UIViewController;
enum ZNConfigurationLanguage : NSInteger;

/// Configuration object used to modify behaviour and provide external dependencies for verification process.
SWIFT_CLASS_NAMED("Configuration")
@interface ZNConfiguration : NSObject
/// App store application identifier, e.g. 1047225016. Optional.
@property (nonatomic, strong) NSNumber * _Nullable appID;
/// Identance API endpoint URL
@property (nonatomic, copy) NSURL * _Null_unspecified apiURL;
/// JWT token provider. Required.
@property (nonatomic, strong) id <ZNTokenProvider> _Null_unspecified tokenProvider;
/// Working mode for verification.
/// allStages: Show full list of stages
/// singleMode: Immidiatelly start first available stage
@property (nonatomic) enum ZNConfigurationWorkingMode workingMode;
/// Used to show support page. rootViewController could be used as root for modal presentation. Optional
@property (nonatomic, copy) void (^ _Nullable showSupportScreen)(UIViewController * _Nonnull);
/// Used to manually set language of the SDK. By default it is system/app language controlled by iOS.
/// If host app use custom language management the property should be directly set to appropriate value.
@property (nonatomic) enum ZNConfigurationLanguage language;
/// If <code>language</code> set to anythyng other than <code>system</code> value AND host applciation need to use custom texts
/// then this property must be set with URL to strings file (aka. Localizable.strings)
/// which contains these texts in appropriate language.
@property (nonatomic, copy) NSURL * _Nullable customLanguageStringsURL;
/// Reserved for internal usage. Must be nil.
@property (nonatomic, copy) NSString * _Nullable reserved;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationLanguage, "ConfigurationLanguage", open) {
  ZNConfigurationLanguageSystem = 0,
  ZNConfigurationLanguageEnglish = 1,
  ZNConfigurationLanguageRussian = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationWorkingMode, "ConfigurationWorkingMode", open) {
  ZNConfigurationWorkingModeAllStages = 0,
  ZNConfigurationWorkingModeSingleStage = 1,
};





/// Verification status enum.
typedef SWIFT_ENUM_NAMED(NSInteger, ZNVerificationStatus, "DossierSubmitStatus", open) {
/// User close verification without any changes to Dossier
  ZNVerificationStatusCancelled = 0,
/// User Dossier was changed during current verification session
  ZNVerificationStatusDossierSubmitted = 1,
/// User Dossier is in rejected state
  ZNVerificationStatusDossierRejected = 2,
};



typedef SWIFT_ENUM_NAMED(NSInteger, ZNLogLevel, "LogLevel", open) {
  ZNLogLevelVerbose = 0,
  ZNLogLevelDebug = 1,
  ZNLogLevelInfo = 2,
  ZNLogLevelWarning = 3,
  ZNLogLevelError = 4,
};



















/// User Dossier Stage status
typedef SWIFT_ENUM_NAMED(NSInteger, ZNStageStatus, "StageStatus", open) {
/// New stage, user do not provide any information so far
  ZNStageStatusDraft = 0,
/// There is no final decision on application
  ZNStageStatusPending = 1,
/// User has to provide updated information to the initial application
  ZNStageStatusCorrection = 2,
/// Final decision, user has successfully passed verification
  ZNStageStatusAccepted = 3,
/// User not allowed to send this stage, until he passes previous stage
  ZNStageStatusLocked = 4,
/// User has submitted stage and it is still processing on backend
  ZNStageStatusInprogress = 5,
/// Final decision, user has not passed verification
  ZNStageStatusRefused = 6,
/// User has to send subsequent stage of verification
  ZNStageStatusNextStageNeeded = 7,
/// User is obliged by CO to provide information on specific stage of verification
  ZNStageStatusCurrentStageNeeded = 8,
};





























SWIFT_CLASS_NAMED("UIScheme")
@interface ZNUIScheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZNUIScheme * _Nonnull shared;)
+ (ZNUIScheme * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZNUIScheme * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)resetToDarkTheme;
- (void)resetToLightTheme;
- (void)loadSchemeFromURL:(NSURL * _Nonnull)url;
- (void)loadSchemeFromDict:(NSDictionary<NSString *, NSString *> * _Nonnull)dict;
- (void)invertColors;
- (void)configureWithScheme:(NSDictionary<NSString *, NSString *> * _Nonnull)scheme;
@end














































/// Primary class to use as entry point for SDK functionality.
SWIFT_CLASS_NAMED("Verification")
@interface ZNVerification : NSObject
/// SDK version e.g. 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
/// SDK full version e.g. 1.0.0(12345)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullVersionString;)
+ (NSString * _Nonnull)fullVersionString SWIFT_WARN_UNUSED_RESULT;
/// Configuration object passed on initialization.
@property (nonatomic, readonly, strong) ZNConfiguration * _Nonnull configuration;
/// Initializes verification object with configuration.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     configuration: Valid configuration object.
///   </li>
/// </ul>
- (nullable instancetype)initWithConfiguration:(ZNConfiguration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZNVerificationViewController;

@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Creates user verification controller.
- (ZNVerificationViewController * _Nonnull)verificationViewController SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Controlls if logging functionality is enabled. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLogging;)
+ (BOOL)isLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLogging:(BOOL)newValue;
/// Controlls log level. Default - warning.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ZNLogLevel logLevel;)
+ (enum ZNLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum ZNLogLevel)newValue;
@end


@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// If localization is in debug mode string keys are displayed instead of values. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLocalizationDebugMode;)
+ (BOOL)isLocalizationDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLocalizationDebugMode:(BOOL)newValue;
/// If true shows rate view on dossier screen on startup. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isRateDebugMode;)
+ (BOOL)isRateDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsRateDebugMode:(BOOL)newValue;
/// If true shows extended error description. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isErrorDebugMode;)
+ (BOOL)isErrorDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsErrorDebugMode:(BOOL)newValue;
/// If true forces manual photo shot. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isForceManualPhoto;)
+ (BOOL)isForceManualPhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsForceManualPhoto:(BOOL)newValue;
@end


/// Verification result.
SWIFT_CLASS_NAMED("VerificationResult")
@interface ZNVerificationResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS_NAMED("ViewController")
@interface ZNViewController : UIViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end

@protocol ZNVerificationViewControllerDelegate;

SWIFT_CLASS_NAMED("VerificationViewController")
@interface ZNVerificationViewController : ZNViewController
@property (nonatomic, weak) id <ZNVerificationViewControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end




SWIFT_PROTOCOL_NAMED("VerificationViewControllerDelegate")
@protocol ZNVerificationViewControllerDelegate
- (void)verification:(ZNVerificationViewController * _Nonnull)viewController didCompleteWith:(ZNVerificationResult * _Nonnull)result;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Identance",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif










SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol ZNTokenProvider
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ClosureTokenProvider")
@interface ZNClosureTokenProvider : NSObject <ZNTokenProvider>
- (nonnull instancetype)initWithProvider:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable)))provider OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nonnull provider)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable));
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
enum ZNConfigurationWorkingMode : NSInteger;
@class UIViewController;
enum ZNConfigurationLanguage : NSInteger;

/// Configuration object used to modify behaviour and provide external dependencies for verification process.
SWIFT_CLASS_NAMED("Configuration")
@interface ZNConfiguration : NSObject
/// App store application identifier, e.g. 1047225016. Optional.
@property (nonatomic, strong) NSNumber * _Nullable appID;
/// Identance API endpoint URL
@property (nonatomic, copy) NSURL * _Null_unspecified apiURL;
/// JWT token provider. Required.
@property (nonatomic, strong) id <ZNTokenProvider> _Null_unspecified tokenProvider;
/// Working mode for verification.
/// allStages: Show full list of stages
/// singleMode: Immidiatelly start first available stage
@property (nonatomic) enum ZNConfigurationWorkingMode workingMode;
/// Used to show support page. rootViewController could be used as root for modal presentation. Optional
@property (nonatomic, copy) void (^ _Nullable showSupportScreen)(UIViewController * _Nonnull);
/// Used to manually set language of the SDK. By default it is system/app language controlled by iOS.
/// If host app use custom language management the property should be directly set to appropriate value.
@property (nonatomic) enum ZNConfigurationLanguage language;
/// If <code>language</code> set to anythyng other than <code>system</code> value AND host applciation need to use custom texts
/// then this property must be set with URL to strings file (aka. Localizable.strings)
/// which contains these texts in appropriate language.
@property (nonatomic, copy) NSURL * _Nullable customLanguageStringsURL;
/// Reserved for internal usage. Must be nil.
@property (nonatomic, copy) NSString * _Nullable reserved;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationLanguage, "ConfigurationLanguage", open) {
  ZNConfigurationLanguageSystem = 0,
  ZNConfigurationLanguageEnglish = 1,
  ZNConfigurationLanguageRussian = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationWorkingMode, "ConfigurationWorkingMode", open) {
  ZNConfigurationWorkingModeAllStages = 0,
  ZNConfigurationWorkingModeSingleStage = 1,
};





/// Verification status enum.
typedef SWIFT_ENUM_NAMED(NSInteger, ZNVerificationStatus, "DossierSubmitStatus", open) {
/// User close verification without any changes to Dossier
  ZNVerificationStatusCancelled = 0,
/// User Dossier was changed during current verification session
  ZNVerificationStatusDossierSubmitted = 1,
/// User Dossier is in rejected state
  ZNVerificationStatusDossierRejected = 2,
};



typedef SWIFT_ENUM_NAMED(NSInteger, ZNLogLevel, "LogLevel", open) {
  ZNLogLevelVerbose = 0,
  ZNLogLevelDebug = 1,
  ZNLogLevelInfo = 2,
  ZNLogLevelWarning = 3,
  ZNLogLevelError = 4,
};



















/// User Dossier Stage status
typedef SWIFT_ENUM_NAMED(NSInteger, ZNStageStatus, "StageStatus", open) {
/// New stage, user do not provide any information so far
  ZNStageStatusDraft = 0,
/// There is no final decision on application
  ZNStageStatusPending = 1,
/// User has to provide updated information to the initial application
  ZNStageStatusCorrection = 2,
/// Final decision, user has successfully passed verification
  ZNStageStatusAccepted = 3,
/// User not allowed to send this stage, until he passes previous stage
  ZNStageStatusLocked = 4,
/// User has submitted stage and it is still processing on backend
  ZNStageStatusInprogress = 5,
/// Final decision, user has not passed verification
  ZNStageStatusRefused = 6,
/// User has to send subsequent stage of verification
  ZNStageStatusNextStageNeeded = 7,
/// User is obliged by CO to provide information on specific stage of verification
  ZNStageStatusCurrentStageNeeded = 8,
};





























SWIFT_CLASS_NAMED("UIScheme")
@interface ZNUIScheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZNUIScheme * _Nonnull shared;)
+ (ZNUIScheme * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZNUIScheme * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)resetToDarkTheme;
- (void)resetToLightTheme;
- (void)loadSchemeFromURL:(NSURL * _Nonnull)url;
- (void)loadSchemeFromDict:(NSDictionary<NSString *, NSString *> * _Nonnull)dict;
- (void)invertColors;
- (void)configureWithScheme:(NSDictionary<NSString *, NSString *> * _Nonnull)scheme;
@end














































/// Primary class to use as entry point for SDK functionality.
SWIFT_CLASS_NAMED("Verification")
@interface ZNVerification : NSObject
/// SDK version e.g. 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
/// SDK full version e.g. 1.0.0(12345)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullVersionString;)
+ (NSString * _Nonnull)fullVersionString SWIFT_WARN_UNUSED_RESULT;
/// Configuration object passed on initialization.
@property (nonatomic, readonly, strong) ZNConfiguration * _Nonnull configuration;
/// Initializes verification object with configuration.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     configuration: Valid configuration object.
///   </li>
/// </ul>
- (nullable instancetype)initWithConfiguration:(ZNConfiguration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZNVerificationViewController;

@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Creates user verification controller.
- (ZNVerificationViewController * _Nonnull)verificationViewController SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Controlls if logging functionality is enabled. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLogging;)
+ (BOOL)isLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLogging:(BOOL)newValue;
/// Controlls log level. Default - warning.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ZNLogLevel logLevel;)
+ (enum ZNLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum ZNLogLevel)newValue;
@end


@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// If localization is in debug mode string keys are displayed instead of values. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLocalizationDebugMode;)
+ (BOOL)isLocalizationDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLocalizationDebugMode:(BOOL)newValue;
/// If true shows rate view on dossier screen on startup. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isRateDebugMode;)
+ (BOOL)isRateDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsRateDebugMode:(BOOL)newValue;
/// If true shows extended error description. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isErrorDebugMode;)
+ (BOOL)isErrorDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsErrorDebugMode:(BOOL)newValue;
/// If true forces manual photo shot. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isForceManualPhoto;)
+ (BOOL)isForceManualPhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsForceManualPhoto:(BOOL)newValue;
@end


/// Verification result.
SWIFT_CLASS_NAMED("VerificationResult")
@interface ZNVerificationResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS_NAMED("ViewController")
@interface ZNViewController : UIViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end

@protocol ZNVerificationViewControllerDelegate;

SWIFT_CLASS_NAMED("VerificationViewController")
@interface ZNVerificationViewController : ZNViewController
@property (nonatomic, weak) id <ZNVerificationViewControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end




SWIFT_PROTOCOL_NAMED("VerificationViewControllerDelegate")
@protocol ZNVerificationViewControllerDelegate
- (void)verification:(ZNVerificationViewController * _Nonnull)viewController didCompleteWith:(ZNVerificationResult * _Nonnull)result;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Identance",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif










SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol ZNTokenProvider
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ClosureTokenProvider")
@interface ZNClosureTokenProvider : NSObject <ZNTokenProvider>
- (nonnull instancetype)initWithProvider:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable)))provider OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nonnull provider)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable));
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
enum ZNConfigurationWorkingMode : NSInteger;
@class UIViewController;
enum ZNConfigurationLanguage : NSInteger;

/// Configuration object used to modify behaviour and provide external dependencies for verification process.
SWIFT_CLASS_NAMED("Configuration")
@interface ZNConfiguration : NSObject
/// App store application identifier, e.g. 1047225016. Optional.
@property (nonatomic, strong) NSNumber * _Nullable appID;
/// Identance API endpoint URL
@property (nonatomic, copy) NSURL * _Null_unspecified apiURL;
/// JWT token provider. Required.
@property (nonatomic, strong) id <ZNTokenProvider> _Null_unspecified tokenProvider;
/// Working mode for verification.
/// allStages: Show full list of stages
/// singleMode: Immidiatelly start first available stage
@property (nonatomic) enum ZNConfigurationWorkingMode workingMode;
/// Used to show support page. rootViewController could be used as root for modal presentation. Optional
@property (nonatomic, copy) void (^ _Nullable showSupportScreen)(UIViewController * _Nonnull);
/// Used to manually set language of the SDK. By default it is system/app language controlled by iOS.
/// If host app use custom language management the property should be directly set to appropriate value.
@property (nonatomic) enum ZNConfigurationLanguage language;
/// If <code>language</code> set to anythyng other than <code>system</code> value AND host applciation need to use custom texts
/// then this property must be set with URL to strings file (aka. Localizable.strings)
/// which contains these texts in appropriate language.
@property (nonatomic, copy) NSURL * _Nullable customLanguageStringsURL;
/// Reserved for internal usage. Must be nil.
@property (nonatomic, copy) NSString * _Nullable reserved;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationLanguage, "ConfigurationLanguage", open) {
  ZNConfigurationLanguageSystem = 0,
  ZNConfigurationLanguageEnglish = 1,
  ZNConfigurationLanguageRussian = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationWorkingMode, "ConfigurationWorkingMode", open) {
  ZNConfigurationWorkingModeAllStages = 0,
  ZNConfigurationWorkingModeSingleStage = 1,
};





/// Verification status enum.
typedef SWIFT_ENUM_NAMED(NSInteger, ZNVerificationStatus, "DossierSubmitStatus", open) {
/// User close verification without any changes to Dossier
  ZNVerificationStatusCancelled = 0,
/// User Dossier was changed during current verification session
  ZNVerificationStatusDossierSubmitted = 1,
/// User Dossier is in rejected state
  ZNVerificationStatusDossierRejected = 2,
};



typedef SWIFT_ENUM_NAMED(NSInteger, ZNLogLevel, "LogLevel", open) {
  ZNLogLevelVerbose = 0,
  ZNLogLevelDebug = 1,
  ZNLogLevelInfo = 2,
  ZNLogLevelWarning = 3,
  ZNLogLevelError = 4,
};



















/// User Dossier Stage status
typedef SWIFT_ENUM_NAMED(NSInteger, ZNStageStatus, "StageStatus", open) {
/// New stage, user do not provide any information so far
  ZNStageStatusDraft = 0,
/// There is no final decision on application
  ZNStageStatusPending = 1,
/// User has to provide updated information to the initial application
  ZNStageStatusCorrection = 2,
/// Final decision, user has successfully passed verification
  ZNStageStatusAccepted = 3,
/// User not allowed to send this stage, until he passes previous stage
  ZNStageStatusLocked = 4,
/// User has submitted stage and it is still processing on backend
  ZNStageStatusInprogress = 5,
/// Final decision, user has not passed verification
  ZNStageStatusRefused = 6,
/// User has to send subsequent stage of verification
  ZNStageStatusNextStageNeeded = 7,
/// User is obliged by CO to provide information on specific stage of verification
  ZNStageStatusCurrentStageNeeded = 8,
};





























SWIFT_CLASS_NAMED("UIScheme")
@interface ZNUIScheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZNUIScheme * _Nonnull shared;)
+ (ZNUIScheme * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZNUIScheme * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)resetToDarkTheme;
- (void)resetToLightTheme;
- (void)loadSchemeFromURL:(NSURL * _Nonnull)url;
- (void)loadSchemeFromDict:(NSDictionary<NSString *, NSString *> * _Nonnull)dict;
- (void)invertColors;
- (void)configureWithScheme:(NSDictionary<NSString *, NSString *> * _Nonnull)scheme;
@end














































/// Primary class to use as entry point for SDK functionality.
SWIFT_CLASS_NAMED("Verification")
@interface ZNVerification : NSObject
/// SDK version e.g. 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
/// SDK full version e.g. 1.0.0(12345)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullVersionString;)
+ (NSString * _Nonnull)fullVersionString SWIFT_WARN_UNUSED_RESULT;
/// Configuration object passed on initialization.
@property (nonatomic, readonly, strong) ZNConfiguration * _Nonnull configuration;
/// Initializes verification object with configuration.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     configuration: Valid configuration object.
///   </li>
/// </ul>
- (nullable instancetype)initWithConfiguration:(ZNConfiguration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZNVerificationViewController;

@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Creates user verification controller.
- (ZNVerificationViewController * _Nonnull)verificationViewController SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Controlls if logging functionality is enabled. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLogging;)
+ (BOOL)isLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLogging:(BOOL)newValue;
/// Controlls log level. Default - warning.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ZNLogLevel logLevel;)
+ (enum ZNLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum ZNLogLevel)newValue;
@end


@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// If localization is in debug mode string keys are displayed instead of values. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLocalizationDebugMode;)
+ (BOOL)isLocalizationDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLocalizationDebugMode:(BOOL)newValue;
/// If true shows rate view on dossier screen on startup. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isRateDebugMode;)
+ (BOOL)isRateDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsRateDebugMode:(BOOL)newValue;
/// If true shows extended error description. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isErrorDebugMode;)
+ (BOOL)isErrorDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsErrorDebugMode:(BOOL)newValue;
/// If true forces manual photo shot. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isForceManualPhoto;)
+ (BOOL)isForceManualPhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsForceManualPhoto:(BOOL)newValue;
@end


/// Verification result.
SWIFT_CLASS_NAMED("VerificationResult")
@interface ZNVerificationResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS_NAMED("ViewController")
@interface ZNViewController : UIViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end

@protocol ZNVerificationViewControllerDelegate;

SWIFT_CLASS_NAMED("VerificationViewController")
@interface ZNVerificationViewController : ZNViewController
@property (nonatomic, weak) id <ZNVerificationViewControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end




SWIFT_PROTOCOL_NAMED("VerificationViewControllerDelegate")
@protocol ZNVerificationViewControllerDelegate
- (void)verification:(ZNVerificationViewController * _Nonnull)viewController didCompleteWith:(ZNVerificationResult * _Nonnull)result;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Identance",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif










SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol ZNTokenProvider
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ClosureTokenProvider")
@interface ZNClosureTokenProvider : NSObject <ZNTokenProvider>
- (nonnull instancetype)initWithProvider:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable)))provider OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) void (^ _Nonnull provider)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable));
- (void)tokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
enum ZNConfigurationWorkingMode : NSInteger;
@class UIViewController;
enum ZNConfigurationLanguage : NSInteger;

/// Configuration object used to modify behaviour and provide external dependencies for verification process.
SWIFT_CLASS_NAMED("Configuration")
@interface ZNConfiguration : NSObject
/// App store application identifier, e.g. 1047225016. Optional.
@property (nonatomic, strong) NSNumber * _Nullable appID;
/// Identance API endpoint URL
@property (nonatomic, copy) NSURL * _Null_unspecified apiURL;
/// JWT token provider. Required.
@property (nonatomic, strong) id <ZNTokenProvider> _Null_unspecified tokenProvider;
/// Working mode for verification.
/// allStages: Show full list of stages
/// singleMode: Immidiatelly start first available stage
@property (nonatomic) enum ZNConfigurationWorkingMode workingMode;
/// Used to show support page. rootViewController could be used as root for modal presentation. Optional
@property (nonatomic, copy) void (^ _Nullable showSupportScreen)(UIViewController * _Nonnull);
/// Used to manually set language of the SDK. By default it is system/app language controlled by iOS.
/// If host app use custom language management the property should be directly set to appropriate value.
@property (nonatomic) enum ZNConfigurationLanguage language;
/// If <code>language</code> set to anythyng other than <code>system</code> value AND host applciation need to use custom texts
/// then this property must be set with URL to strings file (aka. Localizable.strings)
/// which contains these texts in appropriate language.
@property (nonatomic, copy) NSURL * _Nullable customLanguageStringsURL;
/// Reserved for internal usage. Must be nil.
@property (nonatomic, copy) NSString * _Nullable reserved;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationLanguage, "ConfigurationLanguage", open) {
  ZNConfigurationLanguageSystem = 0,
  ZNConfigurationLanguageEnglish = 1,
  ZNConfigurationLanguageRussian = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZNConfigurationWorkingMode, "ConfigurationWorkingMode", open) {
  ZNConfigurationWorkingModeAllStages = 0,
  ZNConfigurationWorkingModeSingleStage = 1,
};





/// Verification status enum.
typedef SWIFT_ENUM_NAMED(NSInteger, ZNVerificationStatus, "DossierSubmitStatus", open) {
/// User close verification without any changes to Dossier
  ZNVerificationStatusCancelled = 0,
/// User Dossier was changed during current verification session
  ZNVerificationStatusDossierSubmitted = 1,
/// User Dossier is in rejected state
  ZNVerificationStatusDossierRejected = 2,
};



typedef SWIFT_ENUM_NAMED(NSInteger, ZNLogLevel, "LogLevel", open) {
  ZNLogLevelVerbose = 0,
  ZNLogLevelDebug = 1,
  ZNLogLevelInfo = 2,
  ZNLogLevelWarning = 3,
  ZNLogLevelError = 4,
};



















/// User Dossier Stage status
typedef SWIFT_ENUM_NAMED(NSInteger, ZNStageStatus, "StageStatus", open) {
/// New stage, user do not provide any information so far
  ZNStageStatusDraft = 0,
/// There is no final decision on application
  ZNStageStatusPending = 1,
/// User has to provide updated information to the initial application
  ZNStageStatusCorrection = 2,
/// Final decision, user has successfully passed verification
  ZNStageStatusAccepted = 3,
/// User not allowed to send this stage, until he passes previous stage
  ZNStageStatusLocked = 4,
/// User has submitted stage and it is still processing on backend
  ZNStageStatusInprogress = 5,
/// Final decision, user has not passed verification
  ZNStageStatusRefused = 6,
/// User has to send subsequent stage of verification
  ZNStageStatusNextStageNeeded = 7,
/// User is obliged by CO to provide information on specific stage of verification
  ZNStageStatusCurrentStageNeeded = 8,
};





























SWIFT_CLASS_NAMED("UIScheme")
@interface ZNUIScheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZNUIScheme * _Nonnull shared;)
+ (ZNUIScheme * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZNUIScheme * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)resetToDarkTheme;
- (void)resetToLightTheme;
- (void)loadSchemeFromURL:(NSURL * _Nonnull)url;
- (void)loadSchemeFromDict:(NSDictionary<NSString *, NSString *> * _Nonnull)dict;
- (void)invertColors;
- (void)configureWithScheme:(NSDictionary<NSString *, NSString *> * _Nonnull)scheme;
@end














































/// Primary class to use as entry point for SDK functionality.
SWIFT_CLASS_NAMED("Verification")
@interface ZNVerification : NSObject
/// SDK version e.g. 1.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
/// SDK full version e.g. 1.0.0(12345)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullVersionString;)
+ (NSString * _Nonnull)fullVersionString SWIFT_WARN_UNUSED_RESULT;
/// Configuration object passed on initialization.
@property (nonatomic, readonly, strong) ZNConfiguration * _Nonnull configuration;
/// Initializes verification object with configuration.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     configuration: Valid configuration object.
///   </li>
/// </ul>
- (nullable instancetype)initWithConfiguration:(ZNConfiguration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZNVerificationViewController;

@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Creates user verification controller.
- (ZNVerificationViewController * _Nonnull)verificationViewController SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// Controlls if logging functionality is enabled. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLogging;)
+ (BOOL)isLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLogging:(BOOL)newValue;
/// Controlls log level. Default - warning.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ZNLogLevel logLevel;)
+ (enum ZNLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum ZNLogLevel)newValue;
@end


@interface ZNVerification (SWIFT_EXTENSION(Identance))
/// If localization is in debug mode string keys are displayed instead of values. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLocalizationDebugMode;)
+ (BOOL)isLocalizationDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLocalizationDebugMode:(BOOL)newValue;
/// If true shows rate view on dossier screen on startup. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isRateDebugMode;)
+ (BOOL)isRateDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsRateDebugMode:(BOOL)newValue;
/// If true shows extended error description. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isErrorDebugMode;)
+ (BOOL)isErrorDebugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsErrorDebugMode:(BOOL)newValue;
/// If true forces manual photo shot. Default - false.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isForceManualPhoto;)
+ (BOOL)isForceManualPhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsForceManualPhoto:(BOOL)newValue;
@end


/// Verification result.
SWIFT_CLASS_NAMED("VerificationResult")
@interface ZNVerificationResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS_NAMED("ViewController")
@interface ZNViewController : UIViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end

@protocol ZNVerificationViewControllerDelegate;

SWIFT_CLASS_NAMED("VerificationViewController")
@interface ZNVerificationViewController : ZNViewController
@property (nonatomic, weak) id <ZNVerificationViewControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end




SWIFT_PROTOCOL_NAMED("VerificationViewControllerDelegate")
@protocol ZNVerificationViewControllerDelegate
- (void)verification:(ZNVerificationViewController * _Nonnull)viewController didCompleteWith:(ZNVerificationResult * _Nonnull)result;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
