// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Identance
import ARKit
import AVFoundation
import AudioToolbox
import SystemConfiguration.CaptiveNetwork
import CoreFoundation
import CoreGraphics
import CoreTelephony
import DeviceCheck
import Dispatch
import Down
import Foundation
@_exported import Identance
import MobileCoreServices
import Identance.Private
import QuartzCore
import Security
import StoreKit
import Swift
import SystemConfiguration
import UIKit.UIGeometry
import UIKit
import Vision
import os.log
import os
@objc(ZNLogLevel) public enum LogLevel : Swift.Int {
  case verbose = 0
  case debug = 1
  case info = 2
  case warning = 3
  case error = 4
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension Configuration {
  public func validateMicroblink() throws
}
@objc(ZNVerificationViewControllerDelegate) public protocol VerificationViewControllerDelegate {
  @objc(verification:didCompleteWith:) func verification(_ viewController: Identance.VerificationViewController, didCompleteWith result: Identance.VerificationResult)
}
@_hasMissingDesignatedInitializers @objc(ZNVerificationViewController) public class VerificationViewController : Identance.ViewController {
  @objc weak public var delegate: Identance.VerificationViewControllerDelegate?
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
@objc(ZNStageStatus) public enum StageStatus : Swift.Int {
  case draft
  case pending
  case correction
  case accepted
  case locked
  case inprogress
  case refused
  case nextStageNeeded
  case currentStageNeeded
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZNTokenProvider) public protocol TokenProvider {
  @objc func token(completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
}
@objc(ZNClosureTokenProvider) open class ClosureTokenProvider : ObjectiveC.NSObject, Identance.TokenProvider {
  @objc public init(provider: @escaping (@escaping (Swift.String?, Swift.Error?) -> Swift.Void) -> Swift.Void)
  @objc open var provider: (@escaping (Swift.String?, Swift.Error?) -> Swift.Void) -> Swift.Void
  @objc open func token(completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ZNUIScheme) public class UIScheme : ObjectiveC.NSObject {
  @objc public static var shared: Identance.UIScheme
  @objc public func resetToDarkTheme()
  @objc public func resetToLightTheme()
  @objc(loadSchemeFromURL:) public func loadScheme(from url: Foundation.URL)
  @objc(loadSchemeFromDict:) public func loadScheme(from dict: [Swift.String : Swift.String])
  @objc public func invertColors()
  @objc public func configure(scheme: [Swift.String : Swift.String])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ZNConfiguration) public class Configuration : ObjectiveC.NSObject {
  @objc public var appID: Foundation.NSNumber?
  @objc public var apiURL: Foundation.URL!
  @objc public var tokenProvider: Identance.TokenProvider!
  @objc public var workingMode: Identance.ConfigurationWorkingMode
  @objc public var showSupportScreen: ((UIKit.UIViewController) -> Swift.Void)?
  @objc public var language: Identance.ConfigurationLanguage
  @objc public var customLanguageStringsURL: Foundation.URL?
  @objc public var reserved: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc(ZNConfigurationLanguage) public enum ConfigurationLanguage : Swift.Int {
  case system = 0
  case english = 1
  case russian = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZNConfigurationWorkingMode) public enum ConfigurationWorkingMode : Swift.Int {
  case allStages = 0
  case singleStage = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
precedencegroup FormPrecedence {
  associativity: left
  higherThan: LogicalConjunctionPrecedence
}
precedencegroup SectionPrecedence {
  associativity: left
  higherThan: FormPrecedence
}
infix operator +++ : FormPrecedence
infix operator <<< : SectionPrecedence
public typealias StageID = Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ZNVerificationResult) public class VerificationResult : ObjectiveC.NSObject {
  final public let submitStatus: Identance.DossierSubmitStatus
  final public let stageStatuses: [Identance.StageID : Identance.StageStatus]?
  @objc override dynamic public init()
  @objc deinit
}
@objc(ZNVerificationStatus) public enum DossierSubmitStatus : Swift.Int {
  case cancelled
  case dossierSubmitted
  case dossierRejected
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZNVerification) public class Verification : ObjectiveC.NSObject {
  @objc public static var versionString: Swift.String {
    @objc get
  }
  @objc public static var fullVersionString: Swift.String {
    @objc get
  }
  @objc final public let configuration: Identance.Configuration
  @objc public init(configuration: Identance.Configuration) throws
  @objc deinit
  @objc override dynamic public init()
}
extension Verification {
  @objc dynamic public func verificationViewController() -> Identance.VerificationViewController
}
extension Collection where Self.Element == Swift.UInt8, Self.Index == Swift.Int {
}
@objc extension Verification {
  @objc public static var isLogging: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var logLevel: Identance.LogLevel {
    @objc get
    @objc set
  }
}
@objc extension Verification {
  @objc public static var isLocalizationDebugMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var isRateDebugMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var isErrorDebugMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var isForceManualPhoto: Swift.Bool {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ZNViewController) public class ViewController : UIKit.UIViewController {
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension UIDeviceOrientation {
  public init(videoOrientation: AVFoundation.AVCaptureVideoOrientation)
}
extension Identance.LogLevel : Swift.Equatable {}
extension Identance.LogLevel : Swift.Hashable {}
extension Identance.LogLevel : Swift.RawRepresentable {}
extension Identance.ConfigurationLanguage : Swift.Equatable {}
extension Identance.ConfigurationLanguage : Swift.Hashable {}
extension Identance.ConfigurationLanguage : Swift.RawRepresentable {}
extension Identance.StageStatus : Swift.Equatable {}
extension Identance.StageStatus : Swift.Hashable {}
extension Identance.StageStatus : Swift.RawRepresentable {}
extension Identance.ConfigurationWorkingMode : Swift.Equatable {}
extension Identance.ConfigurationWorkingMode : Swift.Hashable {}
extension Identance.ConfigurationWorkingMode : Swift.RawRepresentable {}
extension Identance.DossierSubmitStatus : Swift.Equatable {}
extension Identance.DossierSubmitStatus : Swift.Hashable {}
extension Identance.DossierSubmitStatus : Swift.RawRepresentable {}
